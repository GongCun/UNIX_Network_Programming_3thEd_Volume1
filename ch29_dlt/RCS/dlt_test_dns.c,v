head	1.2;
access;
symbols;
locks
	gongcun:1.2; strict;
comment	@ * @;


1.2
date	2016.05.21.15.11.52;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.05.21.11.58.26;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#include "udpcksum-ex.h"
#include <libgen.h>

struct sockaddr *dest, *local;
socklen_t destlen, locallen;
/* int cksum=1; */
int cksum=0;
struct sockaddr localaddr; /* must be global variable */


int main(int argc, char *argv[])
{
    struct addrinfo *paiRes, aiHints;
    int ret;

    if (argc != 3)
        err_quit("Usage: %s <host> <service>", basename(argv[0]));

    aiHints.ai_flags = AI_CANONNAME;
    aiHints.ai_family = AF_INET;
    aiHints.ai_socktype = SOCK_DGRAM;
    aiHints.ai_protocol = IPPROTO_UDP;

    if ((ret = getaddrinfo(argv[1], argv[2], &aiHints, &paiRes)) != 0)
        err_quit("getaddrinfo error: %s", gai_strerror(ret));
    char strHost[64];
    int port;
    if (paiRes->ai_family != AF_INET)
        err_quit("ai_family error");
    if (inet_ntop(paiRes->ai_family, &((struct sockaddr_in *)paiRes->ai_addr)->sin_addr, strHost, sizeof(strHost)) == NULL)
        err_sys("inet_ntop error");
    port = ntohs(((struct sockaddr_in *)paiRes->ai_addr)->sin_port);

    printf("Query to %s:%d\n", strHost, port);

    dest = paiRes->ai_addr;
    destlen = paiRes->ai_addrlen;
    int sockfd;
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
        err_sys("socket error");
    if (connect(sockfd, dest, destlen) < 0)
        err_sys("connect error");

    locallen = sizeof(struct sockaddr);
    bzero(&localaddr, locallen);
    if (getsockname(sockfd, &localaddr, &locallen) < 0)
        err_sys("getsockname error");
    if (((struct sockaddr_in *)&localaddr)->sin_addr.s_addr == htonl(INADDR_ANY))
        err_quit("can't determine local address");
    local = &localaddr;
    if (inet_ntop(AF_INET, &((struct sockaddr_in *)local)->sin_addr, strHost, sizeof(strHost)) == NULL)
        err_sys("inet_ntop error");
    port = ntohs(((struct sockaddr_in *)local)->sin_port);
    printf("From %s:%d\n", strHost, port);


    /* open raw socket */
    dlt_open_raw();
    dlt_send_dnsquery(); /* construct the DNS data,
                            and call dlt_udp_write() to
                            write to raw socket fd */

    
    return 0;
}



@


1.1
log
@Initial revision
@
text
@d6 3
a8 1
int cksum=1;
a13 1
    struct sockaddr localaddr;
@
