head	1.6;
access;
symbols;
locks
	gongcunjust:1.6; strict;
comment	@ * @;


1.6
date	2015.04.26.02.50.11;	author gongcunjust;	state Exp;
branches;
next	1.5;

1.5
date	2015.04.26.02.47.05;	author gongcunjust;	state Exp;
branches;
next	1.4;

1.4
date	2015.04.24.12.49.33;	author gongcunjust;	state Exp;
branches;
next	1.3;

1.3
date	2015.04.24.12.43.55;	author gongcunjust;	state Exp;
branches;
next	1.2;

1.2
date	2015.04.23.13.18.12;	author gongcunjust;	state Exp;
branches;
next	1.1;

1.1
date	2015.04.23.13.08.49;	author gongcunjust;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@#include "unp.h"

static void sig_chld(int signo)
{
    pid_t pid;
    int stat;

    while ((pid = waitpid((pid_t)-1, &stat, WNOHANG)) > 0)
        printf("child %d terminated\n", pid);
    if (pid == (pid_t)-1)
        if (errno != ECHILD)
            err_sys("waitpid error");
    return;

}

int main(int argc, char **argv)
{
    int listenfd, connfd;
    pid_t childpid;
    socklen_t clilen;
    struct sockaddr_in cliaddr, servaddr;

    if (Signal_intr(SIGCHLD, sig_chld) == SIG_ERR) /* POSIX sigaction implements
                                                      SA_INTERRUPT */
        err_sys("Signal error");

    listenfd = Socket(AF_INET, SOCK_STREAM, 0);
    bzero(&servaddr, sizeof servaddr);
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(SERV_PORT); /* well-known port defined in unp.h == 9877 */

    Bind(listenfd, (SA *) &servaddr, sizeof servaddr);
    Listen(listenfd, LISTENQ);

    for (;;) {
        clilen = sizeof(cliaddr);
        connfd = accept(listenfd, (SA *) &cliaddr, &clilen);
        if (connfd < 0) {
            if (errno == EINTR)
                continue;
            else
                err_sys("accept error");
        }
        if ((childpid = fork()) == 0) { /* child */
            Close(listenfd);
            str_echo(connfd); /* process the request */
            exit(0);
        }
        Close(connfd); /* parent closes connected socket */
    }

    exit(0);
}

@


1.5
log
@signal handler witch waitpid(WNOHANG).
@
text
@d11 2
a12 1
        err_sys("waitpid error");
@


1.4
log
@judge if errno == EINTR.
@
text
@d8 4
a11 4
    pid = wait(&stat);
    if (pid == -1)
        err_sys("wait error");
    printf("child %d terminated\n", pid);
d13 1
@


1.3
log
@signal_intr: set SA_INTERRUPT.
@
text
@d37 7
a43 1
        connfd = Accept(listenfd, (SA *) &cliaddr, &clilen);
@


1.2
log
@Signal is restartable.
@
text
@d22 2
a23 1
    if (Signal(SIGCHLD, sig_chld) == SIG_ERR) /* POSIX sigaction implements */
@


1.1
log
@Initial revision
@
text
@d3 12
d22 3
@
