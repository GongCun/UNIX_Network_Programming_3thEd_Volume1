head	1.3;
access;
symbols;
locks
	gongcun:1.3; strict;
comment	@ * @;


1.3
date	2016.04.23.14.07.29;	author gongcun;	state Exp;
branches;
next	1.2;

1.2
date	2016.04.06.13.58.47;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.04.06.13.55.34;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* Our own header for the programs that use threads.
   Include this file, instead of "unp.h". */

#ifndef	__unp_pthread_ex_h
#define	__unp_pthread_ex_h

#include	"unpthread.h"

void thread_str_cli(FILE *, int);
void *thread_copyto(void *);

#endif	/* __unp_pthread_ex_h */
@


1.2
log
@*** empty log message ***
@
text
@d10 1
a10 1
void *copyto(void *);
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
#include	"unp.h"
d9 2
a10 21
void	Pthread_create(pthread_t *, const pthread_attr_t *,
					   void * (*)(void *), void *);
void	Pthread_join(pthread_t, void **);
void	Pthread_detach(pthread_t);
void	Pthread_kill(pthread_t, int);

void	Pthread_mutexattr_init(pthread_mutexattr_t *);
void	Pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);
void	Pthread_mutex_init(pthread_mutex_t *, pthread_mutexattr_t *);
void	Pthread_mutex_lock(pthread_mutex_t *);
void	Pthread_mutex_unlock(pthread_mutex_t *);

void	Pthread_cond_broadcast(pthread_cond_t *);
void	Pthread_cond_signal(pthread_cond_t *);
void	Pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
void	Pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *,
							   const struct timespec *);

void	Pthread_key_create(pthread_key_t *, void (*)(void *));
void	Pthread_setspecific(pthread_key_t, const void *);
void	Pthread_once(pthread_once_t *, void (*)(void));
@
