head	1.6;
access;
symbols;
locks
	gongcun:1.6; strict;
comment	@ * @;


1.6
date	2016.05.13.14.08.10;	author gongcun;	state Exp;
branches;
next	1.5;

1.5
date	2016.05.11.14.17.52;	author gongcun;	state Exp;
branches;
next	1.4;

1.4
date	2016.05.10.22.59.21;	author gongcun;	state Exp;
branches;
next	1.3;

1.3
date	2016.05.09.14.55.56;	author gongcun;	state Exp;
branches;
next	1.2;

1.2
date	2016.05.09.14.51.14;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.05.09.14.46.36;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@#include "raw_icmpd.h"

int raw_serv_listen(void) /* return listen fd */
{
    struct sockaddr_un un;
    int fd, len;

    bzero(&un, sizeof(struct sockaddr_un));

    if (unlink(SOCKNAME) < 0 && errno != ENOENT)
        err_sys("unlink error");

    strncpy(un.sun_path, SOCKNAME, sizeof(un.sun_path));
    un.sun_family = AF_UNIX;

    if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)
        err_sys("socket error");

    len = offsetof(struct sockaddr_un, sun_path) + strlen(un.sun_path);
    if (bind(fd, (struct sockaddr *)&un, len) < 0)
        err_sys("bind error");
    if (listen(fd, 1024) < 0)
        err_sys("listen error");
    return fd;
}

int raw_serv_accept(int listenfd) /* return accept fd */
{
    int len, clifd;
    struct sockaddr_un un;
    struct stat statbuf;

    bzero(&un, sizeof(struct sockaddr_un));
    len = sizeof(struct sockaddr_un);
    while ((clifd = accept(listenfd, (struct sockaddr *)&un, (socklen_t *)&len)) < 0) {
       if (errno != EINTR)
           err_sys("accept error");
       else
           continue;
    }

    len -= offsetof(struct sockaddr_un, sun_path);
    un.sun_path[len] = 0;
#ifdef _DEBUG
    printf("client UNIX domain name: %s\n", un.sun_path);
#endif

    if (stat(un.sun_path, &statbuf) < 0)
        err_sys("stat error");
#ifdef S_ISSOCK
    if (S_ISSOCK(statbuf.st_mode) == 0)
        err_sys("not a UNIX domain socket");
#endif
    if (unlink(un.sun_path) < 0)
        err_sys("unlink error");
    return clifd;
}

int raw_cli_conn(void)
{
    struct sockaddr_un un;
    int fd, len;

    if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)
        err_sys("socket error");

    bzero(&un, sizeof(struct sockaddr_un));
    un.sun_family = AF_UNIX;
    snprintf(un.sun_path, sizeof(un.sun_path), "/tmp/%d", (getpid() & 0xffff) | 0x8000);

    len = offsetof(struct sockaddr_un, sun_path) + strlen(un.sun_path);

    if (unlink(un.sun_path) < 0 && errno != ENOENT)
        err_sys("unlink error");

    if (bind(fd, (struct sockaddr *)&un, len) < 0)
        err_sys("bind error");

    /* fill socket address structure with server's address */
    bzero(&un, sizeof(struct sockaddr_un));
    un.sun_family = AF_UNIX;
    strncpy(un.sun_path, SOCKNAME, sizeof(un.sun_path));
    len = offsetof(struct sockaddr_un, sun_path) + strlen(un.sun_path);
    if (connect(fd, (struct sockaddr *)&un, len) < 0)
        err_sys("connect error");
    return fd;
}


int raw_send_fd(int fd, int fd_to_send)
{
    struct iovec iov[1];
    struct msghdr msg;
    char buf[1]; /* send/recv 2-byte protocol */

    iov[0].iov_base = buf;
    iov[0].iov_len = 1;
    msg.msg_iov = iov;
    msg.msg_iovlen = 1;
    msg.msg_name = NULL;
    msg.msg_namelen = 0;

    if (fd_to_send < 0)
        err_sys("fd to send < 0");

    buf[0] = 0; /* just pad out the buf */

    struct cmsghdr *cmptr = NULL;
    if ((cmptr = malloc(CMSG_LEN(sizeof(int)))) == NULL)
        err_sys("malloc error");
    cmptr->cmsg_level = SOL_SOCKET;
    cmptr->cmsg_type = SCM_RIGHTS;
    cmptr->cmsg_len = CMSG_LEN(sizeof(int));
    msg.msg_control = cmptr;
    msg.msg_controllen = CMSG_LEN(sizeof(int));

    *((int *)CMSG_DATA(cmptr)) = fd_to_send;
    int len = sendmsg(fd, &msg, 0);
    free(cmptr);
    return len == 1 ? 0 : -1;
}

int raw_recv_fd(int fd) /* return recv fd */
{
    struct iovec iov[1];
    struct msghdr msg;
    char buf[1500];

    iov[0].iov_base = buf;
    iov[0].iov_len = sizeof(buf);
    msg.msg_iov = iov;
    msg.msg_iovlen = 1;
    msg.msg_name = NULL;
    msg.msg_namelen = 0;

    struct cmsghdr *cmptr = NULL;
    if ((cmptr = malloc(CMSG_LEN(sizeof(int)))) == NULL)
        err_sys("malloc error");
    msg.msg_control = cmptr;
    msg.msg_controllen = CMSG_LEN(sizeof(int));

    ssize_t len;
    if ((len = recvmsg(fd, &msg, 0)) < 0)
        err_sys("recvmsg error");
    if (len == 0)
        err_quit("connection closed by server");
    if ((buf[0] & 0xff) != 0)
        err_quit("message format error");
    if (msg.msg_controllen != CMSG_LEN(sizeof(int)))
        err_quit("no fd");

    int fd_to_recv = *((int *)CMSG_DATA(cmptr));
    free(cmptr);

    return fd_to_recv;
}

const char *
raw_icmpcode(int code)
{
	static char errbuf[100];
	switch (code) {
	case 0:
		return ("network unreachable");
	case 1:
		return ("host unreachable");
	case 2:
		return ("protocol unreachable");
	case 3:
		return ("port unreachable");
	case 4:
		return ("fragmentation required but DF bit set");
	case 5:
		return ("source route failed");
	case 6:
		return ("destination network unknown");
	case 7:
		return ("destination host unknown");
	case 8:
		return ("source host isolated (obsolete)");
	case 9:
		return ("destination network administratively prohibited");
	case 10:
		return ("destination host administratively prohibited");
	case 11:
		return ("network unreachable for TOS");
	case 12:
		return ("host unreachable for TOS");
	case 13:
		return ("communication administratively prohibited by filtering");
	case 14:
		return ("host recedence violation");
	case 15:
		return ("precedence cutoff in effect");
	default:
		sprintf(errbuf, "[unknown code %d]", code);
		return errbuf;
	}
}


@


1.5
log
@*** empty log message ***
@
text
@d35 6
a40 2
    if ((clifd = accept(listenfd, (struct sockaddr *)&un, (socklen_t *)&len)) < 0)
        err_sys("accept error");
@


1.4
log
@*** empty log message ***
@
text
@d154 43
@


1.3
log
@*** empty log message ***
@
text
@d84 71
@


1.2
log
@*** empty log message ***
@
text
@d55 1
a55 1
int raw_cli_conn(pid_t pid)
d65 1
a65 1
    snprintf(un.sun_path, sizeof(un.sun_path), "/tmp/%d", (pid & 0xffff) | 0x8000);
@


1.1
log
@Initial revision
@
text
@d33 2
d55 1
a55 1
int raw_cli_conn(void)
d65 1
a65 1
    snprintf(un.sun_path, sizeof(un.sun_path), "/tmp/%d", (getpid() & 0xffff) | 0x8000);
@
