head	1.3;
access;
symbols;
locks
	gongcunjust:1.3; strict;
comment	@ * @;


1.3
date	2015.05.03.12.29.31;	author gongcunjust;	state Exp;
branches;
next	1.2;

1.2
date	2015.05.02.14.07.36;	author gongcunjust;	state Exp;
branches
	1.2.1.1
	1.2.2.1;
next	1.1;

1.1
date	2015.05.02.13.42.03;	author gongcunjust;	state Exp;
branches;
next	;

1.2.1.1
date	2015.05.03.02.36.23;	author gongcunjust;	state Exp;
branches;
next	;

1.2.2.1
date	2015.05.04.13.16.58;	author gongcunjust;	state Exp;
branches;
next	;


desc
@copy from tcpcliserv.
@


1.3
log
@fix the "--nready == 0 && break" position.
@
text
@#include "unp.h"

int main(int argc, char **argv)
{
    int sockfd, listenfd, connfd, maxfd;
    int nready, n, i, maxi, client[FD_SETSIZE];
    socklen_t clilen;
    struct sockaddr_in cliaddr, servaddr;
    fd_set rset, allset;
    char buf[MAXLINE];


    listenfd = Socket(AF_INET, SOCK_STREAM, 0);
    bzero(&servaddr, sizeof servaddr);
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(SERV_PORT); /* well-known port defined in unp.h == 9877 */

    Bind(listenfd, (SA *) &servaddr, sizeof servaddr);
    Listen(listenfd, LISTENQ);

    maxfd = listenfd;
    maxi = -1;
    for (i = 0; i < FD_SETSIZE; i++)
        client[i] = -1;
    FD_ZERO(&allset);
    FD_SET(listenfd, &allset);

    for (;;) {
        rset = allset;
        nready = Select(maxfd+1, &rset, NULL, NULL, NULL);
        if (FD_ISSET(listenfd, &rset)) {
            clilen = sizeof(cliaddr);
            connfd = Accept(listenfd, (SA *) &cliaddr, &clilen);
            for (i = 0; i < FD_SETSIZE; i++)
                if (client[i] == -1) {
                    client[i] = connfd;
                    break;
                }

            if (i == FD_SETSIZE)
                err_quit("too many clients");

            FD_SET(connfd, &allset);
            if (connfd > maxfd)
                maxfd = connfd;
            if (i > maxi)
                maxi = i;
            if (--nready <= 0)
                continue;
        }

        for (i = 0; i <= maxi; i++) {
            if ((sockfd = client[i]) < 0)
                continue;
            if (FD_ISSET(sockfd, &rset)) {
                if ((n = Read(sockfd, buf, MAXLINE)) == 0) {
                    Close(sockfd);
                    FD_CLR(sockfd, &allset);
                    client[i] = -1;
                } else
                    Writen(sockfd, buf, n);
                if (--nready <= 0)
                    break;
            }
        }
    }
    exit(0);
}

@


1.2
log
@using select (I/O multiplexing).
@
text
@d63 2
a65 2
            if (--nready <= 0)
                break;
@


1.2.2.1
log
@check the setrlimit function.
@
text
@a11 18
    struct rlimit rl;
    if (getrlimit(RLIMIT_NOFILE, &rl) == -1)
        err_sys("getrlimit error");


    printf("FD_SETSIZE = %d\n", FD_SETSIZE);
    printf("rlim_cur = %d\n", (int) rl.rlim_cur);
    printf("rlim_max = %d\n", (int) rl.rlim_max);

    rl.rlim_cur = 1024;
    if (setrlimit(RLIMIT_NOFILE, &rl) == -1)
        err_sys("setrlimit error");

    if (getrlimit(RLIMIT_NOFILE, &rl) == -1)
        err_sys("getrlimit error");
    printf("FD_SETSIZE = %d\n", FD_SETSIZE);
    printf("rlim_cur = %d\n", (int) rl.rlim_cur);
    printf("rlim_max = %d\n", (int) rl.rlim_max);
a62 2
                if (--nready <= 0)
                    break;
d64 2
@


1.2.1.1
log
@set the select's timeoutn but proof it's no use to read's timeout.
@
text
@a11 2
    struct timeval tv;

d31 1
a31 3
        tv.tv_sec = 5;
        tv.tv_usec = 0;
        nready = Select(maxfd+1, &rset, NULL, NULL, &tv);
@


1.1
log
@Initial revision
@
text
@a2 14
static void sig_chld(int signo)
{
    pid_t pid;
    int stat;

    while ((pid = waitpid((pid_t)-1, &stat, WNOHANG)) > 0)
        printf("child %d terminated\n", pid);
    if (pid == (pid_t)-1)
        if (errno != ECHILD)
            err_sys("waitpid error");
    return;

}

d5 2
a6 2
    int listenfd, connfd;
    pid_t childpid;
d9 2
a11 3
    if (Signal_intr(SIGCHLD, sig_chld) == SIG_ERR) /* POSIX sigaction implements
                                                      SA_INTERRUPT */
        err_sys("Signal error");
d22 7
d30 20
a49 4
        clilen = sizeof(cliaddr);
        connfd = accept(listenfd, (SA *) &cliaddr, &clilen);
        if (connfd < 0) {
            if (errno == EINTR)
a50 2
            else
                err_sys("accept error");
d52 14
a65 4
        if ((childpid = fork()) == 0) { /* child */
            Close(listenfd);
            str_echo(connfd); /* process the request */
            exit(0);
a66 1
        Close(connfd); /* parent closes connected socket */
a67 1

@
