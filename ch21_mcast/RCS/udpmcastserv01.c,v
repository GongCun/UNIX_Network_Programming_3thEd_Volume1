head	1.5;
access;
symbols;
locks
	gongcunjust:1.5; strict;
comment	@ * @;


1.5
date	2015.06.09.23.53.10;	author gongcunjust;	state Exp;
branches;
next	1.4;

1.4
date	2015.06.09.23.35.55;	author gongcunjust;	state Exp;
branches;
next	1.3;

1.3
date	2015.06.09.14.08.13;	author gongcunjust;	state Exp;
branches;
next	1.2;

1.2
date	2015.06.09.14.03.20;	author gongcunjust;	state Exp;
branches;
next	1.1;

1.1
date	2015.06.09.13.59.44;	author gongcunjust;	state Exp;
branches;
next	;


desc
@@


1.5
log
@wrong version
@
text
@#include "mymcast.h"

int main(int argc, char *argv[])
{
    int sockfd, ret, n;
    struct sockaddr_in servaddr, cliaddr;
    struct ip_mreq imr;
    socklen_t len;
    char buf[MAXLINE];
    time_t ticks;

    if (argc != 3)
        err_quit("Usage: %s <multicast-address> <service/port>", *argv);

    sockfd = udp_server_ip4(argv[1], argv[2], NULL);

    len = sizeof(servaddr);
    if (getsockname(sockfd, (SA *)&servaddr, &len) < 0)
        err_sys("getsockname error");

    /* join IPv4 multicast group */
    imr.imr_multiaddr = servaddr.sin_addr;
    imr.imr_interface.s_addr = 0; /* let system choose the interface */
    ret = setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
                &imr, sizeof(imr));
    if (ret == -1)
        err_sys("setsockopt error");

    for (;;) {
        len = sizeof(cliaddr);
        n = recvfrom(sockfd, buf, MAXLINE, 0, (SA *)&cliaddr, &len);
        if (n < 0)
            err_sys("recvfrom error");
        printf("datagram from %s\n", Sock_ntop((SA *)&cliaddr, len));

        ticks = time(NULL);
        snprintf(buf, MAXLINE, "%.24s\r\n", ctime(&ticks));
        if (Fork() == 0) {
            ret = setsockopt(sockfd, IPPROTO_IP, IP_DROP_MEMBERSHIP,
                    &imr, sizeof(imr));
            if (ret == -1)
                err_sys("setsockopt error");
            n = sendto(sockfd, buf, strlen(buf), 0, (SA *)&cliaddr, len);
            if (n != strlen(buf))
                err_sys("sendto error");
            exit(0);
        }
    }

    exit(0);

}
@


1.4
log
@*** empty log message ***
@
text
@d38 10
a47 6
        n = write(STDOUT_FILENO, buf, strlen(buf));
        /*
        n = sendto(sockfd, buf, strlen(buf), 0, (SA *)&cliaddr, len);
        */
        if (n != strlen(buf))
            err_sys("write error");
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
#include "unp.h"
d12 2
a13 2
    if (argc != 2)
        err_quit("Usage: %s <IPaddress>", *argv);
d15 5
a19 8
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == -1)
        err_sys("socket error");
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    if (inet_aton(argv[1], &servaddr.sin_addr) == 0)
        err_sys("inet_aton error");
    servaddr.sin_port = htons(13); /* need sudo */
a28 3
    if (bind(sockfd, (SA *)&servaddr, sizeof(servaddr)) == -1)
        err_sys("bind error");

d38 2
d41 1
d43 1
a43 1
            err_sys("sendto error");
@


1.2
log
@*** empty log message ***
@
text
@d12 3
d20 2
a21 1
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
a23 3
    if (bind(sockfd, (SA *)&servaddr, sizeof(servaddr)) == -1)
        err_sys("bind error");

d32 3
@


1.1
log
@Initial revision
@
text
@d20 3
a30 3
    if (bind(sockfd, (SA *)&servaddr, sizeof(servaddr)) == -1)
        err_sys("bind error");

@
