head	1.2;
access;
symbols;
locks
	gongcun:1.2; strict;
comment	@ * @;


1.2
date	2016.06.04.13.34.43;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.06.03.13.03.58;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@#include "modeserv.h"
#include <assert.h>

struct readval {
    char read_buf[MAXLINE];
    int read_cnt;
    char *read_ptr;
};

static pthread_key_t rl_key;
static pthread_once_t rl_once = PTHREAD_ONCE_INIT;

static void mode_readline_once(void)
{
    int ret;
    if ((ret = pthread_key_create(&rl_key, free)) != 0) {
        errno = ret;
        perror("pthread_key_create error");
        exit(1);
    }
}

static ssize_t mode_my_read(int fd, char *ptr, struct readval *pval)
{
    if (pval->read_cnt <= 0) { /* initialize */
again:
        if((pval->read_cnt = read(fd, pval->read_buf, sizeof(pval->read_buf))) < 0) {
            if (errno == EAGAIN)
                goto again;
            else
                return -1;
        } else if (pval->read_cnt == 0)
            return 0;
        pval->read_ptr = pval->read_buf; /* pointer to the begin */
    }

    pval->read_cnt--;
    *ptr = *pval->read_ptr++;
    return 1;
}

ssize_t mode_readline_r(int fd, char *vptr, ssize_t maxlen)
{
    struct readval *pval;
    int ret;
    if ((ret = pthread_once(&rl_once, &mode_readline_once)) != 0) {
        errno = ret;
        perror("pthread_once error");
        exit(1);
    }

    if ((pval = pthread_getspecific(rl_key)) == NULL) {
#if (_DEBUG)
        printf("tid %ld will allocate thread data\n", (long)pthread_self());
#endif
        if ((pval = calloc(1, sizeof(struct readval))) == NULL)
            err_sys("calloc error");
        if ((ret = pthread_setspecific(rl_key, pval)) != 0) {
            errno = ret;
            perror("pthread_setspecific error");
            exit(1);
        }
    }


    char *ptr, c;
    int n;
    ptr = vptr;
    for (n = 1; n < maxlen; n++) {
        if ((ret = mode_my_read(fd, &c, pval)) == 1) {
            *ptr++ = c;
            if (c == '\n')
                break;
        } else if (ret == 0) {
            *ptr = 0;
            return n-1;
        } else
            return -1;
    }

    *ptr = 0;
#if (_DEBUG)
    printf("tid (%ld) key (%lu) readline: %s\n", (long)pthread_self(), rl_key, vptr);
#endif
    return n;
}

@


1.1
log
@Initial revision
@
text
@d1 1
a1 2

#include "thread_readline.h"
d4 5
a8 80
#if defined _NO_THREAD

/*---------------------------------------------------------------
 * It's original version for _no_ thread-safe version of readline
 */


static char buf[MAXLINE];
static int cnt;
static char *pchGlobal;

static ssize_t thread_my_read(int fd, char *pchUser)
{
    if (cnt <= 0) {
again:
        if ((cnt = read(fd, buf, MAXLINE)) < 0) {
            if (errno == EINTR)
                goto again;
            return -1;
        } else if (cnt == 0)
            return 0;
        pchGlobal = buf;
    }
    cnt--;
    *pchUser = *pchGlobal++;
    return 1;
}

ssize_t thread_readline(int fd, char *ptr, ssize_t maxlen)
{
    ssize_t i, rc;
    char ch, *pch;

    pch = ptr;
    for (i = 1; i < maxlen; i++) {
        if ((rc = thread_my_read(fd, &ch)) == 1) {
            *pch++ = ch;
            if (ch == '\n')
                break;
        } else if (rc == 0) {
            *pch = 0;
            return i-1;
        } else
            return -1;
    }

    *pch = 0;
    return i;
}

ssize_t Thread_readline(int fd, char *ptr, ssize_t maxlen) {
    ssize_t len;
    len = thread_readline(fd, ptr, maxlen);
    if (len < 0)
        err_sys("thread_readline error");
    return len;
}

ssize_t thread_readlinebuf(char **ppchUser)
{
    if (cnt)
        *ppchUser = pchGlobal;
    return cnt;
}

void thread_readlineflush(int fd)
{
    char *pch;
    ssize_t restcnt;

    restcnt = thread_readlinebuf(&pch);
    if (restcnt) {
        Writen(fd, pch, restcnt);
        cnt = 0;
    }

}
/* end for _no_ thread-safe readline */

#else
d13 1
a13 1
void thread_readline_destructor(void *ptr)
d15 6
a20 4
    free(ptr);
#ifdef _TEST
    fprintf(stderr, "%u: released the pointer\n", pthread_self());
#endif
d23 1
a23 1
void thread_readline_once(void)
d25 1
a25 13
#ifdef _TEST
    fprintf(stderr, "%u: calling the thread_readline_once\n", pthread_self());
#endif
    pthread_key_create(&rl_key, thread_readline_destructor);
}

static ssize_t thread_my_read(int fd, char *pchUser, Rline *pRline)
{
#define rlcnt pRline->cnt
#define rlbuf pRline->buf
#define rlpchGlobal pRline->pchGlobal

    if (rlcnt <= 0) {
d27 2
a28 2
        if ((rlcnt = read(fd, rlbuf, MAXLINE)) < 0) {
            if (errno == EINTR)
d30 3
a32 2
            return -1;
        } else if (rlcnt == 0)
d34 1
a34 1
        rlpchGlobal = rlbuf;
d36 3
a38 2
    rlcnt--;
    *pchUser = *rlpchGlobal++;
d42 9
d52 3
a54 10
ssize_t thread_readline(int fd, char *pchUser, ssize_t maxlen)
{
    ssize_t i, rc;
    char ch, *pch;
    Rline *pRline;

    Pthread_once(&rl_once, thread_readline_once);
    if ((pRline = pthread_getspecific(rl_key)) == NULL) {
#ifdef _TEST
        fprintf(stderr, "%u allocating the thread specified data\n", pthread_self());
d56 7
a62 2
        pRline = Calloc(1, sizeof(Rline));
        Pthread_setspecific(rl_key, pRline);
a63 1
    pch = pchUser;
d65 8
a72 4
    for (i = 1; i < maxlen; i++) { /* _must_ start from 1 */
        if ((rc = thread_my_read(fd, &ch, pRline)) == 1) {
            *pch++ = ch;
            if (ch == '\n')
d74 3
a76 3
        } else if (rc == 0) {
            *pch = 0;
            return i-1;
a79 3
    *pch = 0;
    return i;
}
d81 5
a85 18
ssize_t Thread_readline(int fd, char *ptr, ssize_t maxlen) {
    ssize_t len;
    len = thread_readline(fd, ptr, maxlen);
    if (len < 0)
        err_sys("thread_readline error");
    return len;
}

ssize_t thread_readlinebuf(char **ppchUser)
{
    Rline *pRline;

    Pthread_once(&rl_once, thread_readline_once);
    pRline = pthread_getspecific(rl_key);
    assert(pRline != NULL); /* must _not_ be NULL */
    if (pRline->cnt)
        *ppchUser = pRline->pchGlobal;
    return pRline->cnt;
a87 19
void thread_readlineflush(int fd)
{
    char *pch;
    ssize_t restcnt;
    Rline *pRline;

    Pthread_once(&rl_once, thread_readline_once);
    pRline = pthread_getspecific(rl_key);
    assert(pRline != NULL); /* must _not_ be NULL */

    restcnt = thread_readlinebuf(&pch);
    if (restcnt) {
        Writen(fd, pch, restcnt);
        pRline->cnt = 0;
    }
}


#endif
@
