head	1.2;
access;
symbols;
locks
	gongcun:1.2; strict;
comment	@# @;


1.2
date	2016.06.18.00.33.09;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.05.28.01.15.04;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@include ../Make.defines

PROGS =	mode_client mode_serv00 mode_serv01 mode_serv02 mode_serv02_dyn \
		mode_serv02_dyn_v02 mode_serv03 mode_serv04 mode_serv04b mode_serv05 \
		mode_serv05_dyn mode_serv06 mode_serv07 mode_serv07_dyn mode_serv08

all:	${PROGS}

# The client to test the various servers.
mode_client:	mode_client.c mode_connect.c
		${CC} ${CFLAGS} -o $@@ $^ ${LIBS}

# serv00: traditional concurrent server: use as base level
mode_serv00:	mode_serv00.c mode_reply.c mode_cpu_time.c sig_int.c
		${CC} ${CFLAGS} -o $@@ $^ ${LIBS}

# serv01: one fork per client (traditional concurrent server).
mode_serv01:	mode_serv01.c mode_reply.c mode_cpu_time.c sig_int.c sig_chld.c
		${CC} ${CFLAGS} -o $@@ $^ ${LIBS}

# serv02: prefork, no locking; works on BSD-derived systems
#	but not on SVR4-derived systems.
mode_serv02:	mode_serv02.c mode_reply.c mode_cpu_time.c sig_int.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}
sockinfo_02:	sockinfo_02.c mode_reply.c mode_cpu_time.c sig_int.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# serv02_dyn: prefork, dynamic increase/decrease children# by
# pipe()
mode_serv02_dyn:	mode_serv02_dyn.c mode_reply.c mode_cpu_time.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# serv02_dyn_v02: prefork, dynamic increase/decrease children# by
# monitoring the queue length of listenfd.
mode_serv02_dyn_v02:	mode_serv02_dyn_v02.c mode_reply.c mode_cpu_time.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# Test use recv() or ioctl(FIONREAD) to see the listenfd's queue, but 
# it's only useful in accept-fd.
mode_serv02_dyn_v03:	mode_serv02_dyn_v03.c mode_reply.c mode_cpu_time.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# prefork, no locking; parent close the listenfd
ex01:	ex01.c mode_reply.c mode_cpu_time.c sig_int.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# serv02l: prefork, no locking, block in select instead of accept to see
#	select collisions; works on BSD-derived systems but not on SVR4.

# serv02m: prefork, no locking; works on BSD-derived systems.
#	This version is "metered" to see #clients/child serviced.

# serv03: prefork, file locking using fcntl().  Similar to Apache server, metered
mode_serv03:	mode_serv03.c mode_reply.c mode_cpu_time.c sig_int.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# serv03m: prefork, file locking using fcntl(), metered.

# serv04: prefork, file locking using semaphore locking.
mode_serv04:	mode_serv04.c mode_reply.c mode_cpu_time.c sig_int.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}
		
# serv04b: prefork, file locking using thread locking.
mode_serv04b:	mode_serv04b.c mode_reply.c mode_cpu_time.c sig_int.c mode_lock.c
		${CC} ${CFLAGS} -D_PREFORK -o $@@ $^ ${LIBS}

# serv05: prefork, descrptor passing to children.  Similar to NSCA server.
mode_serv05:	mode_serv05.c mode_reply.c mode_cpu_time.c sig_int.c mode_read_fd.c mode_write_fd.c
		${CC} ${CFLAGS} -D_PASSFD -o $@@ $^ ${LIBS}

ex02:	ex02.c mode_reply.c mode_cpu_time.c sig_int.c mode_read_fd.c mode_write_fd.c
		${CC} ${CFLAGS} -D_PASSFD -D__DYNAMIC -o $@@ $^ ${LIBS}

# serv05_dyn: prefork, passing fd, with dynamic increase/decrease children processes
mode_serv05_dyn:	mode_serv05_dyn.c mode_reply.c mode_cpu_time.c mode_read_fd.c mode_write_fd.c mode_lock.c
		${CC} ${CFLAGS} -D_PASSFD -D__DYNAMIC -o $@@ $^ ${LIBS}

# Thread versions must call a reentrant version of readline().
# serv06: one thread per client.
mode_serv06:	mode_serv06.c mode_reply.c mode_cpu_time.c sig_int.c mode_readline_r.c
		#${CC} ${CFLAGS} -D__PTHREAD -D_DEBUG -o $@@ $^ ${LIBS}
		${CC} ${CFLAGS} -D__PTHREAD -o $@@ $^ ${LIBS}

# serv07: prethread with mutex locking around accept().
mode_serv07:	mode_serv07.c mode_reply.c mode_cpu_time.c sig_int.c mode_readline_r.c
		${CC} ${CFLAGS} -D__PTHREAD -D_PRETHREAD -o $@@ $^ ${LIBS}

# serv07_dyn: prethread with dynmaic increase/decrease the threads.
mode_serv07_dyn:	mode_serv07_dyn.c mode_reply.c mode_cpu_time.c sig_int.c mode_readline_r.c wrappthread.c
		${CC} ${CFLAGS} -D__PTHREAD -D_PRETHREAD -o $@@ $^ ${LIBS}
x:	x.c
		${CC} ${CFLAGS} -D__PTHREAD -D_PRETHREAD -o $@@ $^ ${LIBS}

# serv08: prethread with only main thread doing accept().
mode_serv08:	mode_serv08.c mode_reply.c mode_cpu_time.c sig_int.c mode_readline_r.c
		${CC} ${CFLAGS} -D__PTHREAD -D_PRETHREAD -o $@@ $^ ${LIBS}

# serv09: prethread with no locking around accept().

#
sockinfo:	sockinfo.c
		${CC} ${CFLAGS} -o $@@ $^ ${LIBS}
x2:	x2.c
		${CC} ${CFLAGS} -o $@@ $^ ${LIBS}

clean:
		rm -f ${PROGS} ${CLEANFILES}
@


1.1
log
@Initial revision
@
text
@d3 3
a5 2
PROGS =	client clientrst \
		serv01 serv02 serv03 serv04 serv05 serv06 serv07 serv08
d10 2
a11 7
client:	client.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ client.o pr_cpu_time.o ${LIBS}

# A special client that sends an RST occasionally.
# Used to test the XTI server (should receive disconnect).
clientrst:	clientrst.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ clientrst.o pr_cpu_time.o ${LIBS}
d14 2
a15 2
serv00:	serv00.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv00.o web_child.o pr_cpu_time.o ${LIBS}
d18 2
a19 3
serv01:	serv01.o web_child.o sig_chld_waitpid.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv01.o web_child.o sig_chld_waitpid.o \
			pr_cpu_time.o ${LIBS}
d23 23
a45 2
serv02:	serv02.o child02.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv02.o child02.o web_child.o pr_cpu_time.o ${LIBS}
a48 3
serv02l:serv02.o child02l.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o serv02l serv02.o child02l.o web_child.o \
			pr_cpu_time.o ${LIBS}
d52 4
a55 8
serv02m:serv02m.o child02m.o web_child.o pr_cpu_time.o meter.o
		${CC} ${CFLAGS} -o serv02m serv02m.o child02m.o web_child.o \
			pr_cpu_time.o meter.o ${LIBS}

# serv03: prefork, file locking using fcntl().  Similar to Apache server.
serv03:	serv03.o child03.o lock_fcntl.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv03.o child03.o lock_fcntl.o web_child.o \
			pr_cpu_time.o ${LIBS}
d58 8
a65 8
serv03m:	serv03m.o child03m.o lock_fcntl.o web_child.o pr_cpu_time.o meter.o
		${CC} ${CFLAGS} -o $@@ serv03m.o child03m.o lock_fcntl.o web_child.o \
			pr_cpu_time.o meter.o ${LIBS}

# serv04: prefork, file locking using pthread locking.
serv04:	serv04.o child04.o lock_pthread.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv04.o child04.o lock_pthread.o \
			web_child.o pr_cpu_time.o ${LIBS}
d68 9
a76 3
serv05:	serv05.o child05.o lock_fcntl.o web_child.o pr_cpu_time.o
		${CC} ${CFLAGS} -o $@@ serv05.o child05.o lock_fcntl.o web_child.o \
			pr_cpu_time.o ${LIBS}
d80 3
a82 3
serv06:	serv06.o web_child.o pr_cpu_time.o readline.o
		${CC} ${CFLAGS} -o $@@ serv06.o web_child.o pr_cpu_time.o \
			readline.o ${LIBS}
d85 8
a92 3
serv07:	serv07.o pthread07.o web_child.o pr_cpu_time.o readline.o
		${CC} ${CFLAGS} -o $@@ serv07.o pthread07.o web_child.o pr_cpu_time.o \
			readline.o ${LIBS}
d95 2
a96 3
serv08:	serv08.o pthread08.o web_child.o pr_cpu_time.o readline.o
		${CC} ${CFLAGS} -o $@@ serv08.o pthread08.o web_child.o pr_cpu_time.o \
			readline.o ${LIBS}
d99 6
a104 3
serv09:	serv09.o pthread09.o web_child.o pr_cpu_time.o readline.o
		${CC} ${CFLAGS} -o $@@ serv09.o pthread09.o web_child.o pr_cpu_time.o \
			readline.o ${LIBS}
@
