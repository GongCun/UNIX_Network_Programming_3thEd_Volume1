head	1.5;
access;
symbols;
locks
	gongcun:1.5; strict;
comment	@ * @;


1.5
date	2016.06.17.13.10.45;	author gongcun;	state Exp;
branches;
next	1.4;

1.4
date	2016.06.14.00.03.33;	author gongcun;	state Exp;
branches;
next	1.3;

1.3
date	2016.06.13.22.53.04;	author gongcun;	state Exp;
branches;
next	1.2;

1.2
date	2016.06.05.07.12.53;	author gongcun;	state Exp;
branches;
next	1.1;

1.1
date	2016.05.29.07.26.31;	author gongcun;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@#include "unp.h"
#include <pthread.h>

pthread_mutex_t mlock = PTHREAD_MUTEX_INITIALIZER;

typedef unsigned long long ull_t;

struct timeval tv;

static void *thr_fn(void *arg)
{
    int n = (int)arg;
    pthread_mutex_lock(&mlock);
    if (n == 0) {
        sleep(5);
        /* pthread_mutex_unlock(&mlock); */
        pthread_exit(NULL);
    } else {
        printf("tid = %llu\n", (ull_t)pthread_self());
    }
    pthread_mutex_unlock(&mlock);

    return NULL;
}

static void sig_alrm(int signo)
{
    struct timeval tvnow;
    if (gettimeofday(&tvnow, NULL) == -1)
        err_sys("gettimeofday error");
    printf("%llu caught SIGALRM after %.2f seconds\n", (ull_t)pthread_self(),
            (tvnow.tv_sec - tv.tv_sec) + (tvnow.tv_usec - tv.tv_usec) / 1000000.0);
    return;
}

int main(void)
{
    int i, err;
    pthread_t tid[3];


    if (gettimeofday(&tv, NULL) == -1)
        err_sys("gettimeofday error");
    printf("main tid: %llu\n", (ull_t)pthread_self());

    if (signal(SIGALRM, sig_alrm) == SIG_ERR)
        err_sys("signal error");

    for (i = 0; i < 3; i++) {
        if ((err = pthread_create(&tid[i], NULL, &thr_fn, (void *)i)) != 0) {
            errno = err;
            err_sys("pthread_create error");
        }
    }
    sleep(10);
    for (i=0; i<3; i++) {
        if((err = pthread_kill(tid[i], 0)) == ESRCH)
            printf("tid %llu not existed\n", (ull_t)tid[i]);
        else if (err == 0)
            printf("tid %llu existed\n", (ull_t)tid[i]);
    }
    for (;;)
        pause();

    return 0;
}
@


1.4
log
@Proof when thread exit, the mutex will not release.
@
text
@d6 1
a6 1
typedef unsigned long ul_t;
d16 1
d19 1
a19 1
        printf("tid = %lu\n", (ul_t)pthread_self());
d31 1
a31 1
    printf("%lu caught SIGALRM after %.2f seconds\n", (ul_t)pthread_self(),
d44 1
a44 1
    printf("main tid: %lu\n", (ul_t)pthread_self());
d58 1
a58 1
            printf("tid %ld not existed\n", (ul_t)tid[i]);
d60 1
a60 1
            printf("tid %ld existed\n", (ul_t)tid[i]);
@


1.3
log
@*** empty log message ***
@
text
@d4 2
d13 9
a21 3
    printf("%lu alarm after %d seconds\n", (ul_t)pthread_self(), n);
    alarm(n);
    pause();
d38 1
a38 1
    pthread_t tid;
d48 2
a49 2
    for (i = 3; i >= 1; i--) {
        if ((err = pthread_create(&tid, NULL, &thr_fn, (void *)(i*2))) != 0) {
d54 7
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 2
#include <stdlib.h>
#include <stdio.h>
a2 2
#include <sys/mman.h>
#include <errno.h>
d4 22
a25 2
static pthread_mutex_t *plock;
static pthread_mutexattr_t attr;
d29 10
a38 7
    if ((plock = mmap(0, sizeof(int),
                    PROT_READ|PROT_WRITE, 
                    MAP_SHARED|MAP_ANON, -1, 0)) == MAP_FAILED)
    {
        perror("mmap error");
        exit(1);
    }
d40 5
a44 15
    int ret;
    if ((ret = pthread_mutexattr_init(&attr)) != 0) {
        errno = ret;
        perror("pthread_mutexattr_init error");
        exit(1);
    }
    if ((ret = pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED)) != 0) {
        errno = ret;
        perror("pthread_mutexattr_setpshared error");
        exit(1);
    }
    if ((ret = pthread_mutex_init(plock, &attr)) != 0) {
        errno = ret;
        perror("pthread_mutex_init error");
        exit(1);
d46 2
@


1.1
log
@Initial revision
@
text
@d3 6
d12 25
a36 3
    printf("int: %zd\n", sizeof(int));
    printf("long: %zd\n", sizeof(long int));
    printf("double: %zd\n", sizeof(double));
@
